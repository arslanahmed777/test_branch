name: Update Changelog and Bump Version
description: |
  This workflow runs when a PR is merged into main.
  It bumps the version, prepends changelog-entry.txt to CHANGELOG.md,
  clears changelog-entry.txt, and creates a new commit.

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  changelog:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          # Use PAT with admin permissions to bypass branch protection
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Bump patch version and capture it
        id: bump
        run: |
          npm version patch --no-git-tag-version
          echo "version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"

      - name: Prepend changelog-entry.txt to CHANGELOG.md and capture content
        id: changelog
        run: |
          VERSION=${{ steps.bump.outputs.version }}
          DATE=$(date +"%B %e, %Y at %-l:%M %p")

          if [ -f changelog-entry.txt ] && [ -s changelog-entry.txt ]; then
            # Capture changelog content for release
            CHANGELOG_CONTENT=$(cat changelog-entry.txt)
            echo "changelog_content<<EOF" >> "$GITHUB_OUTPUT"
            echo "$CHANGELOG_CONTENT" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
            
            # Update CHANGELOG.md
            echo -e "## v$VERSION - $DATE\n$(cat changelog-entry.txt)\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
            echo "‚úÖ Changelog updated with version v$VERSION"
            echo "has_changelog=true" >> "$GITHUB_OUTPUT"
          else
            echo "‚ö†Ô∏è  No changelog-entry.txt found or empty. Adding generic entry."
            echo -e "## v$VERSION - $DATE\nVersion bump\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
            echo "changelog_content=Version bump - no specific changes documented" >> "$GITHUB_OUTPUT"
            echo "has_changelog=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Clear changelog-entry.txt
        run: |
          # Empty the changelog-entry.txt file
          : > changelog-entry.txt
          echo "‚úÖ changelog-entry.txt cleared"

      - name: Commit and push (amend merge commit)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add all changes
          git add CHANGELOG.md changelog-entry.txt package.json package-lock.json

          VERSION=${{ steps.bump.outputs.version }}
          
          # Amend the merge commit
          git commit --amend --no-edit -m "üîñ Merge PR & bump version to v$VERSION"
          
          # Configure git to use the PAT token for authentication
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git
          
          # Force push to bypass branch protection
          git push --force origin HEAD:main

      - name: Create Git Tag
        run: |
          VERSION=${{ steps.bump.outputs.version }}
          git tag "v$VERSION"
          git push origin "v$VERSION"
        continue-on-error: true

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.bump.outputs.version }}';
            const tagName = `v${version}`;
            const changelogContent = process.env.CHANGELOG_CONTENT;
            const hasChangelog = '${{ steps.changelog.outputs.has_changelog }}' === 'true';
            
            // Prepare release body
            let releaseBody;
            if (hasChangelog && changelogContent && changelogContent !== 'Version bump - no specific changes documented') {
              releaseBody = changelogContent;
            } else {
              releaseBody = `Version ${version} - Auto-generated release\n\nNo specific changes documented.`;
            }
            try {
              await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                name: `Release ${tagName}`,
                 body: releaseBody,
                draft: false,
                prerelease: false
              });
              console.log(`‚úÖ Created release ${tagName}`);
            } catch (error) {
              console.log(`‚ö†Ô∏è  Could not create release: ${error.message}`);
            }
        continue-on-error: true